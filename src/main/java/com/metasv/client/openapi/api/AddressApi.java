/*
 * MetaSV API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.client.openapi.api;

import com.metasv.client.openapi.ApiCallback;
import com.metasv.client.openapi.ApiClient;
import com.metasv.client.openapi.ApiException;
import com.metasv.client.openapi.ApiResponse;
import com.metasv.client.openapi.Configuration;
import com.metasv.client.openapi.Pair;
import com.metasv.client.openapi.ProgressRequestBody;
import com.metasv.client.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.metasv.client.openapi.model.AddressBalance;
import com.metasv.client.openapi.model.AddressUtxo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressApi {
    private ApiClient localVarApiClient;

    public AddressApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addressAddressBalanceGet
     * @param address the requested address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address detail success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressAddressBalanceGetCall(String address, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/address/{address}/balance"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressAddressBalanceGetValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling addressAddressBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = addressAddressBalanceGetCall(address, _callback);
        return localVarCall;

    }

    /**
     * Get address balance by specific address.
     * 
     * @param address the requested address (required)
     * @return AddressBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address detail success. </td><td>  -  </td></tr>
     </table>
     */
    public AddressBalance addressAddressBalanceGet(String address) throws ApiException {
        ApiResponse<AddressBalance> localVarResp = addressAddressBalanceGetWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Get address balance by specific address.
     * 
     * @param address the requested address (required)
     * @return ApiResponse&lt;AddressBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address detail success. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressBalance> addressAddressBalanceGetWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = addressAddressBalanceGetValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<AddressBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get address balance by specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address detail success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressAddressBalanceGetAsync(String address, final ApiCallback<AddressBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressAddressBalanceGetValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<AddressBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addressAddressUtxoGet
     * @param address the requested address (required)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address utxos success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressAddressUtxoGetCall(String address, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressAddressUtxoGetValidateBeforeCall(String address, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling addressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = addressAddressUtxoGetCall(address, flag, _callback);
        return localVarCall;

    }

    /**
     * Get address utxos by specific address(100 per page).
     * 
     * @param address the requested address (required)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @return List&lt;AddressUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address utxos success. </td><td>  -  </td></tr>
     </table>
     */
    public List<AddressUtxo> addressAddressUtxoGet(String address, String flag) throws ApiException {
        ApiResponse<List<AddressUtxo>> localVarResp = addressAddressUtxoGetWithHttpInfo(address, flag);
        return localVarResp.getData();
    }

    /**
     * Get address utxos by specific address(100 per page).
     * 
     * @param address the requested address (required)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;AddressUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address utxos success. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddressUtxo>> addressAddressUtxoGetWithHttpInfo(String address, String flag) throws ApiException {
        okhttp3.Call localVarCall = addressAddressUtxoGetValidateBeforeCall(address, flag, null);
        Type localVarReturnType = new TypeToken<List<AddressUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get address utxos by specific address(100 per page). (asynchronously)
     * 
     * @param address the requested address (required)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get address utxos success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addressAddressUtxoGetAsync(String address, String flag, final ApiCallback<List<AddressUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressAddressUtxoGetValidateBeforeCall(address, flag, _callback);
        Type localVarReturnType = new TypeToken<List<AddressUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
