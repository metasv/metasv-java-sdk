/*
 * MetaSV API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.client.openapi.api;

import com.metasv.client.openapi.ApiCallback;
import com.metasv.client.openapi.ApiClient;
import com.metasv.client.openapi.ApiException;
import com.metasv.client.openapi.ApiResponse;
import com.metasv.client.openapi.Configuration;
import com.metasv.client.openapi.Pair;
import com.metasv.client.openapi.ProgressRequestBody;
import com.metasv.client.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.metasv.client.openapi.model.BroadcastResult;
import com.metasv.client.openapi.model.OutputInfoDetail;
import com.metasv.client.openapi.model.TxDetail;
import com.metasv.client.openapi.model.TxRaw;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TxApi {
    private ApiClient localVarApiClient;

    public TxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for txBroadcastPost
     * @param txRaw  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Broadcast success, txid returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Broadcast Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txBroadcastPostCall(TxRaw txRaw, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = txRaw;

        // create path and map variables
        String localVarPath = "/tx/broadcast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call txBroadcastPostValidateBeforeCall(TxRaw txRaw, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = txBroadcastPostCall(txRaw, _callback);
        return localVarCall;

    }

    /**
     * Broadcast tx to metasv fullnode.
     * This api will broadcast to metasv fullnode directly, If you want to use merchant api, see /merchant/boardcast.
     * @param txRaw  (optional)
     * @return BroadcastResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Broadcast success, txid returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Broadcast Failed </td><td>  -  </td></tr>
     </table>
     */
    public BroadcastResult txBroadcastPost(TxRaw txRaw) throws ApiException {
        ApiResponse<BroadcastResult> localVarResp = txBroadcastPostWithHttpInfo(txRaw);
        return localVarResp.getData();
    }

    /**
     * Broadcast tx to metasv fullnode.
     * This api will broadcast to metasv fullnode directly, If you want to use merchant api, see /merchant/boardcast.
     * @param txRaw  (optional)
     * @return ApiResponse&lt;BroadcastResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Broadcast success, txid returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Broadcast Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BroadcastResult> txBroadcastPostWithHttpInfo(TxRaw txRaw) throws ApiException {
        okhttp3.Call localVarCall = txBroadcastPostValidateBeforeCall(txRaw, null);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Broadcast tx to metasv fullnode. (asynchronously)
     * This api will broadcast to metasv fullnode directly, If you want to use merchant api, see /merchant/boardcast.
     * @param txRaw  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Broadcast success, txid returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Broadcast Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txBroadcastPostAsync(TxRaw txRaw, final ApiCallback<BroadcastResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = txBroadcastPostValidateBeforeCall(txRaw, _callback);
        Type localVarReturnType = new TypeToken<BroadcastResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for txTxidGet
     * @param txid the request ID to search, txhash (required)
     * @param showScript Return source script code or not (default false). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction detail success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txTxidGetCall(String txid, Boolean showScript, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tx/{txid}"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showScript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showScript", showScript));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call txTxidGetValidateBeforeCall(String txid, Boolean showScript, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling txTxidGet(Async)");
        }
        

        okhttp3.Call localVarCall = txTxidGetCall(txid, showScript, _callback);
        return localVarCall;

    }

    /**
     * Get transaction detail by specific txid.
     * This api is parsed from raw hex, you can use /tx/{txid}/raw to parse tx by yourself, If you want detail input info, use &#39;/vin/{txid}&#39; to get detailed input info including address and value.
     * @param txid the request ID to search, txhash (required)
     * @param showScript Return source script code or not (default false). (optional)
     * @return TxDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction detail success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public TxDetail txTxidGet(String txid, Boolean showScript) throws ApiException {
        ApiResponse<TxDetail> localVarResp = txTxidGetWithHttpInfo(txid, showScript);
        return localVarResp.getData();
    }

    /**
     * Get transaction detail by specific txid.
     * This api is parsed from raw hex, you can use /tx/{txid}/raw to parse tx by yourself, If you want detail input info, use &#39;/vin/{txid}&#39; to get detailed input info including address and value.
     * @param txid the request ID to search, txhash (required)
     * @param showScript Return source script code or not (default false). (optional)
     * @return ApiResponse&lt;TxDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction detail success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxDetail> txTxidGetWithHttpInfo(String txid, Boolean showScript) throws ApiException {
        okhttp3.Call localVarCall = txTxidGetValidateBeforeCall(txid, showScript, null);
        Type localVarReturnType = new TypeToken<TxDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction detail by specific txid. (asynchronously)
     * This api is parsed from raw hex, you can use /tx/{txid}/raw to parse tx by yourself, If you want detail input info, use &#39;/vin/{txid}&#39; to get detailed input info including address and value.
     * @param txid the request ID to search, txhash (required)
     * @param showScript Return source script code or not (default false). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction detail success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txTxidGetAsync(String txid, Boolean showScript, final ApiCallback<TxDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = txTxidGetValidateBeforeCall(txid, showScript, _callback);
        Type localVarReturnType = new TypeToken<TxDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for txTxidRawGet
     * @param txid the request ID to search, txhash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction raw hex success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txTxidRawGetCall(String txid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tx/{txid}/raw"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call txTxidRawGetValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling txTxidRawGet(Async)");
        }
        

        okhttp3.Call localVarCall = txTxidRawGetCall(txid, _callback);
        return localVarCall;

    }

    /**
     * Get transaction raw hex by specific txid.
     * 
     * @param txid the request ID to search, txhash (required)
     * @return TxRaw
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction raw hex success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public TxRaw txTxidRawGet(String txid) throws ApiException {
        ApiResponse<TxRaw> localVarResp = txTxidRawGetWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Get transaction raw hex by specific txid.
     * 
     * @param txid the request ID to search, txhash (required)
     * @return ApiResponse&lt;TxRaw&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction raw hex success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TxRaw> txTxidRawGetWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = txTxidRawGetValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<TxRaw>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction raw hex by specific txid. (asynchronously)
     * 
     * @param txid the request ID to search, txhash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get transaction raw hex success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txTxidRawGetAsync(String txid, final ApiCallback<TxRaw> _callback) throws ApiException {

        okhttp3.Call localVarCall = txTxidRawGetValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<TxRaw>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for txTxidSeenGet
     * @param txid the request ID to search, txhash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return true if the transaction is found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txTxidSeenGetCall(String txid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tx/{txid}/seen"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call txTxidSeenGetValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling txTxidSeenGet(Async)");
        }
        

        okhttp3.Call localVarCall = txTxidSeenGetCall(txid, _callback);
        return localVarCall;

    }

    /**
     * Whether MetaSV have seen this tx before. This is a fast approach to know if the tx exist or not.
     * 
     * @param txid the request ID to search, txhash (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return true if the transaction is found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean txTxidSeenGet(String txid) throws ApiException {
        ApiResponse<Boolean> localVarResp = txTxidSeenGetWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Whether MetaSV have seen this tx before. This is a fast approach to know if the tx exist or not.
     * 
     * @param txid the request ID to search, txhash (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return true if the transaction is found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> txTxidSeenGetWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = txTxidSeenGetValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Whether MetaSV have seen this tx before. This is a fast approach to know if the tx exist or not. (asynchronously)
     * 
     * @param txid the request ID to search, txhash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return true if the transaction is found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call txTxidSeenGetAsync(String txid, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = txTxidSeenGetValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vinTxidDetailGet
     * @param txid The txid of the vins (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get vin list success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vinTxidDetailGetCall(String txid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vin/{txid}/detail"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vinTxidDetailGetValidateBeforeCall(String txid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling vinTxidDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = vinTxidDetailGetCall(txid, _callback);
        return localVarCall;

    }

    /**
     * Get all output point of vins in the tx with detailed output script.
     * Search output points by spent txid. Use this api to get detailed inputs for the tx.
     * @param txid The txid of the vins (required)
     * @return List&lt;OutputInfoDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get vin list success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OutputInfoDetail> vinTxidDetailGet(String txid) throws ApiException {
        ApiResponse<List<OutputInfoDetail>> localVarResp = vinTxidDetailGetWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Get all output point of vins in the tx with detailed output script.
     * Search output points by spent txid. Use this api to get detailed inputs for the tx.
     * @param txid The txid of the vins (required)
     * @return ApiResponse&lt;List&lt;OutputInfoDetail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get vin list success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OutputInfoDetail>> vinTxidDetailGetWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = vinTxidDetailGetValidateBeforeCall(txid, null);
        Type localVarReturnType = new TypeToken<List<OutputInfoDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all output point of vins in the tx with detailed output script. (asynchronously)
     * Search output points by spent txid. Use this api to get detailed inputs for the tx.
     * @param txid The txid of the vins (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get vin list success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vinTxidDetailGetAsync(String txid, final ApiCallback<List<OutputInfoDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vinTxidDetailGetValidateBeforeCall(txid, _callback);
        Type localVarReturnType = new TypeToken<List<OutputInfoDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
