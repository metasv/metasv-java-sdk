/*
 * MetaSV API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.client.openapi.api;

import com.metasv.client.openapi.ApiCallback;
import com.metasv.client.openapi.ApiClient;
import com.metasv.client.openapi.ApiException;
import com.metasv.client.openapi.ApiResponse;
import com.metasv.client.openapi.Configuration;
import com.metasv.client.openapi.Pair;
import com.metasv.client.openapi.ProgressRequestBody;
import com.metasv.client.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.metasv.client.openapi.model.SensibleFtBalance;
import com.metasv.client.openapi.model.SensibleFtTransaction;
import com.metasv.client.openapi.model.SensibleFtUtxo;
import com.metasv.client.openapi.model.SensibleOracleInfo;
import com.metasv.client.openapi.model.SensibleSignatureUtxo;
import com.metasv.client.openapi.model.SensibleSignatureUtxoSpendBy;
import com.metasv.client.openapi.model.SensibleSignatureUtxoSpendByUtxo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SensibleApi {
    private ApiClient localVarApiClient;

    public SensibleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SensibleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sensibleFtAddressAddressBalanceGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressBalanceGetCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/ft/address/{address}/balance"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleFtAddressAddressBalanceGetValidateBeforeCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleFtAddressAddressBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleFtAddressAddressBalanceGetCall(address, codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible token balances for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return List&lt;SensibleFtBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleFtBalance> sensibleFtAddressAddressBalanceGet(String address, String codeHash, String genesis) throws ApiException {
        ApiResponse<List<SensibleFtBalance>> localVarResp = sensibleFtAddressAddressBalanceGetWithHttpInfo(address, codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get all sensible token balances for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return ApiResponse&lt;List&lt;SensibleFtBalance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleFtBalance>> sensibleFtAddressAddressBalanceGetWithHttpInfo(String address, String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = sensibleFtAddressAddressBalanceGetValidateBeforeCall(address, codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<List<SensibleFtBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible token balances for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressBalanceGetAsync(String address, String codeHash, String genesis, final ApiCallback<List<SensibleFtBalance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleFtAddressAddressBalanceGetValidateBeforeCall(address, codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleFtBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleFtAddressAddressTxsGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft transactions success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressTxsGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/ft/address/{address}/txs"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleFtAddressAddressTxsGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleFtAddressAddressTxsGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleFtAddressAddressTxsGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible token transaction history for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @return List&lt;SensibleFtTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft transactions success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleFtTransaction> sensibleFtAddressAddressTxsGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<SensibleFtTransaction>> localVarResp = sensibleFtAddressAddressTxsGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all sensible token transaction history for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;SensibleFtTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft transactions success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleFtTransaction>> sensibleFtAddressAddressTxsGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = sensibleFtAddressAddressTxsGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<SensibleFtTransaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible token transaction history for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The last id of the last query(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft transactions success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressTxsGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<SensibleFtTransaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleFtAddressAddressTxsGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleFtTransaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleFtAddressAddressUtxoGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressUtxoGetCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/ft/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleFtAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleFtAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleFtAddressAddressUtxoGetCall(address, codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return List&lt;SensibleFtUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleFtUtxo> sensibleFtAddressAddressUtxoGet(String address, String codeHash, String genesis) throws ApiException {
        ApiResponse<List<SensibleFtUtxo>> localVarResp = sensibleFtAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get all sensible token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return ApiResponse&lt;List&lt;SensibleFtUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleFtUtxo>> sensibleFtAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = sensibleFtAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<List<SensibleFtUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible token utxos for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, final ApiCallback<List<SensibleFtUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleFtAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleFtUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleOracleGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible oracle success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/oracle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleOracleGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sensibleOracleGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get metasv sensible oracle info.
     * 
     * @return SensibleOracleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible oracle success. </td><td>  -  </td></tr>
     </table>
     */
    public SensibleOracleInfo sensibleOracleGet() throws ApiException {
        ApiResponse<SensibleOracleInfo> localVarResp = sensibleOracleGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get metasv sensible oracle info.
     * 
     * @return ApiResponse&lt;SensibleOracleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible oracle success. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SensibleOracleInfo> sensibleOracleGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sensibleOracleGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SensibleOracleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metasv sensible oracle info. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible oracle success. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleGetAsync(final ApiCallback<SensibleOracleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleOracleGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SensibleOracleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleOracleUtxoSpendByTxidIndexByTxidGet
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleUtxoSpendByTxidIndexByTxidGetCall(String txid, Integer index, String byTxid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/oracle/utxoSpendBy/{txid}/{index}/{byTxid}"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()))
            .replaceAll("\\{" + "index" + "\\}", localVarApiClient.escapeString(index.toString()))
            .replaceAll("\\{" + "byTxid" + "\\}", localVarApiClient.escapeString(byTxid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleOracleUtxoSpendByTxidIndexByTxidGetValidateBeforeCall(String txid, Integer index, String byTxid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling sensibleOracleUtxoSpendByTxidIndexByTxidGet(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling sensibleOracleUtxoSpendByTxidIndexByTxidGet(Async)");
        }
        
        // verify the required parameter 'byTxid' is set
        if (byTxid == null) {
            throw new ApiException("Missing the required parameter 'byTxid' when calling sensibleOracleUtxoSpendByTxidIndexByTxidGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleOracleUtxoSpendByTxidIndexByTxidGetCall(txid, index, byTxid, _callback);
        return localVarCall;

    }

    /**
     * Get signature for utxo spend by transaction.
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @return SensibleSignatureUtxoSpendBy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public SensibleSignatureUtxoSpendBy sensibleOracleUtxoSpendByTxidIndexByTxidGet(String txid, Integer index, String byTxid) throws ApiException {
        ApiResponse<SensibleSignatureUtxoSpendBy> localVarResp = sensibleOracleUtxoSpendByTxidIndexByTxidGetWithHttpInfo(txid, index, byTxid);
        return localVarResp.getData();
    }

    /**
     * Get signature for utxo spend by transaction.
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @return ApiResponse&lt;SensibleSignatureUtxoSpendBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SensibleSignatureUtxoSpendBy> sensibleOracleUtxoSpendByTxidIndexByTxidGetWithHttpInfo(String txid, Integer index, String byTxid) throws ApiException {
        okhttp3.Call localVarCall = sensibleOracleUtxoSpendByTxidIndexByTxidGetValidateBeforeCall(txid, index, byTxid, null);
        Type localVarReturnType = new TypeToken<SensibleSignatureUtxoSpendBy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signature for utxo spend by transaction. (asynchronously)
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleUtxoSpendByTxidIndexByTxidGetAsync(String txid, Integer index, String byTxid, final ApiCallback<SensibleSignatureUtxoSpendBy> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleOracleUtxoSpendByTxidIndexByTxidGetValidateBeforeCall(txid, index, byTxid, _callback);
        Type localVarReturnType = new TypeToken<SensibleSignatureUtxoSpendBy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGet
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @param byTxIndex tx index that spent this utxo (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetCall(String txid, Integer index, String byTxid, Integer byTxIndex, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/oracle/utxoSpendByUtxo/{txid}/{index}/{byTxid}/{byTxIndex}"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()))
            .replaceAll("\\{" + "index" + "\\}", localVarApiClient.escapeString(index.toString()))
            .replaceAll("\\{" + "byTxid" + "\\}", localVarApiClient.escapeString(byTxid.toString()))
            .replaceAll("\\{" + "byTxIndex" + "\\}", localVarApiClient.escapeString(byTxIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetValidateBeforeCall(String txid, Integer index, String byTxid, Integer byTxIndex, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGet(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGet(Async)");
        }
        
        // verify the required parameter 'byTxid' is set
        if (byTxid == null) {
            throw new ApiException("Missing the required parameter 'byTxid' when calling sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGet(Async)");
        }
        
        // verify the required parameter 'byTxIndex' is set
        if (byTxIndex == null) {
            throw new ApiException("Missing the required parameter 'byTxIndex' when calling sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetCall(txid, index, byTxid, byTxIndex, _callback);
        return localVarCall;

    }

    /**
     * Get signature for utxo spend by transaction.
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @param byTxIndex tx index that spent this utxo (required)
     * @return SensibleSignatureUtxoSpendByUtxo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public SensibleSignatureUtxoSpendByUtxo sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGet(String txid, Integer index, String byTxid, Integer byTxIndex) throws ApiException {
        ApiResponse<SensibleSignatureUtxoSpendByUtxo> localVarResp = sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetWithHttpInfo(txid, index, byTxid, byTxIndex);
        return localVarResp.getData();
    }

    /**
     * Get signature for utxo spend by transaction.
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @param byTxIndex tx index that spent this utxo (required)
     * @return ApiResponse&lt;SensibleSignatureUtxoSpendByUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SensibleSignatureUtxoSpendByUtxo> sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetWithHttpInfo(String txid, Integer index, String byTxid, Integer byTxIndex) throws ApiException {
        okhttp3.Call localVarCall = sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetValidateBeforeCall(txid, index, byTxid, byTxIndex, null);
        Type localVarReturnType = new TypeToken<SensibleSignatureUtxoSpendByUtxo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signature for utxo spend by transaction. (asynchronously)
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param byTxid txid that spent this utxo (required)
     * @param byTxIndex tx index that spent this utxo (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo or transaction not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetAsync(String txid, Integer index, String byTxid, Integer byTxIndex, final ApiCallback<SensibleSignatureUtxoSpendByUtxo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleOracleUtxoSpendByUtxoTxidIndexByTxidByTxIndexGetValidateBeforeCall(txid, index, byTxid, byTxIndex, _callback);
        Type localVarReturnType = new TypeToken<SensibleSignatureUtxoSpendByUtxo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleOracleUtxoTxidIndexGet
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleUtxoTxidIndexGetCall(String txid, Integer index, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/oracle/utxo/{txid}/{index}"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()))
            .replaceAll("\\{" + "index" + "\\}", localVarApiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleOracleUtxoTxidIndexGetValidateBeforeCall(String txid, Integer index, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling sensibleOracleUtxoTxidIndexGet(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling sensibleOracleUtxoTxidIndexGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleOracleUtxoTxidIndexGetCall(txid, index, _callback);
        return localVarCall;

    }

    /**
     * Get signature for utxo.
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @return SensibleSignatureUtxo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo not found. </td><td>  -  </td></tr>
     </table>
     */
    public SensibleSignatureUtxo sensibleOracleUtxoTxidIndexGet(String txid, Integer index) throws ApiException {
        ApiResponse<SensibleSignatureUtxo> localVarResp = sensibleOracleUtxoTxidIndexGetWithHttpInfo(txid, index);
        return localVarResp.getData();
    }

    /**
     * Get signature for utxo.
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @return ApiResponse&lt;SensibleSignatureUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SensibleSignatureUtxo> sensibleOracleUtxoTxidIndexGetWithHttpInfo(String txid, Integer index) throws ApiException {
        okhttp3.Call localVarCall = sensibleOracleUtxoTxidIndexGetValidateBeforeCall(txid, index, null);
        Type localVarReturnType = new TypeToken<SensibleSignatureUtxo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signature for utxo. (asynchronously)
     * 
     * @param txid Utxo txid. (required)
     * @param index Utxo txid. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get signature success. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utxo not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleOracleUtxoTxidIndexGetAsync(String txid, Integer index, final ApiCallback<SensibleSignatureUtxo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleOracleUtxoTxidIndexGetValidateBeforeCall(txid, index, _callback);
        Type localVarReturnType = new TypeToken<SensibleSignatureUtxo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
