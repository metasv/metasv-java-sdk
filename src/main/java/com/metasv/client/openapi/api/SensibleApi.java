/*
 * MetaSV API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.client.openapi.api;

import com.metasv.client.openapi.ApiCallback;
import com.metasv.client.openapi.ApiClient;
import com.metasv.client.openapi.ApiException;
import com.metasv.client.openapi.ApiResponse;
import com.metasv.client.openapi.Configuration;
import com.metasv.client.openapi.Pair;
import com.metasv.client.openapi.ProgressRequestBody;
import com.metasv.client.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.metasv.client.openapi.model.SensibleFtBalance;
import com.metasv.client.openapi.model.SensibleFtUtxo;
import com.metasv.client.openapi.model.SensibleNftAuctionUtxo;
import com.metasv.client.openapi.model.SensibleNftSellUtxo;
import com.metasv.client.openapi.model.SensibleNftUtxo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SensibleApi {
    private ApiClient localVarApiClient;

    public SensibleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SensibleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for sensibleFtAddressAddressBalanceGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressBalanceGetCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/ft/address/{address}/balance"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleFtAddressAddressBalanceGetValidateBeforeCall(String address, String codeHash, String genesis, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleFtAddressAddressBalanceGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleFtAddressAddressBalanceGetCall(address, codeHash, genesis, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible token balances for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return List&lt;SensibleFtBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleFtBalance> sensibleFtAddressAddressBalanceGet(String address, String codeHash, String genesis) throws ApiException {
        ApiResponse<List<SensibleFtBalance>> localVarResp = sensibleFtAddressAddressBalanceGetWithHttpInfo(address, codeHash, genesis);
        return localVarResp.getData();
    }

    /**
     * Get all sensible token balances for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @return ApiResponse&lt;List&lt;SensibleFtBalance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleFtBalance>> sensibleFtAddressAddressBalanceGetWithHttpInfo(String address, String codeHash, String genesis) throws ApiException {
        okhttp3.Call localVarCall = sensibleFtAddressAddressBalanceGetValidateBeforeCall(address, codeHash, genesis, null);
        Type localVarReturnType = new TypeToken<List<SensibleFtBalance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible token balances for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft balances success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressBalanceGetAsync(String address, String codeHash, String genesis, final ApiCallback<List<SensibleFtBalance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleFtAddressAddressBalanceGetValidateBeforeCall(address, codeHash, genesis, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleFtBalance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleFtAddressAddressUtxoGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressUtxoGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/ft/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleFtAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleFtAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleFtAddressAddressUtxoGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;SensibleFtUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleFtUtxo> sensibleFtAddressAddressUtxoGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<SensibleFtUtxo>> localVarResp = sensibleFtAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all sensible token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;SensibleFtUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleFtUtxo>> sensibleFtAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = sensibleFtAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<SensibleFtUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible token utxos for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible ft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleFtAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<SensibleFtUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleFtAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleFtUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleNftAddressAddressUtxoGet
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftAddressAddressUtxoGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/nft/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleNftAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleNftAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleNftAddressAddressUtxoGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible nft token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;SensibleNftUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleNftUtxo> sensibleNftAddressAddressUtxoGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<SensibleNftUtxo>> localVarResp = sensibleNftAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all sensible nft token utxos for specific address.
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;SensibleNftUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleNftUtxo>> sensibleNftAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = sensibleNftAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<SensibleNftUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible nft token utxos for specific address. (asynchronously)
     * 
     * @param address the requested address (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<SensibleNftUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleNftAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleNftUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetCall(String codeHash, String nftId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/nft/auction/codeHash/{codeHash}/nftId/{nftId}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "nftId" + "\\}", localVarApiClient.escapeString(nftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetValidateBeforeCall(String codeHash, String nftId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(Async)");
        }
        
        // verify the required parameter 'nftId' is set
        if (nftId == null) {
            throw new ApiException("Missing the required parameter 'nftId' when calling sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetCall(codeHash, nftId, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @return List&lt;SensibleNftAuctionUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleNftAuctionUtxo> sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(String codeHash, String nftId) throws ApiException {
        ApiResponse<List<SensibleNftAuctionUtxo>> localVarResp = sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetWithHttpInfo(codeHash, nftId);
        return localVarResp.getData();
    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @return ApiResponse&lt;List&lt;SensibleNftAuctionUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleNftAuctionUtxo>> sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetWithHttpInfo(String codeHash, String nftId) throws ApiException {
        okhttp3.Call localVarCall = sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetValidateBeforeCall(codeHash, nftId, null);
        Type localVarReturnType = new TypeToken<List<SensibleNftAuctionUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param nftId Nft id of this auction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetAsync(String codeHash, String nftId, final ApiCallback<List<SensibleNftAuctionUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetValidateBeforeCall(codeHash, nftId, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleNftAuctionUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleNftGenesisCodeHashGenesisUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftGenesisCodeHashGenesisUtxoGetCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/nft/genesis/{codeHash}/{genesis}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenIndex", tokenIndex));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleNftGenesisCodeHashGenesisUtxoGetValidateBeforeCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling sensibleNftGenesisCodeHashGenesisUtxoGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling sensibleNftGenesisCodeHashGenesisUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleNftGenesisCodeHashGenesisUtxoGetCall(codeHash, genesis, tokenIndex, max, min, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return List&lt;SensibleNftUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleNftUtxo> sensibleNftGenesisCodeHashGenesisUtxoGet(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        ApiResponse<List<SensibleNftUtxo>> localVarResp = sensibleNftGenesisCodeHashGenesisUtxoGetWithHttpInfo(codeHash, genesis, tokenIndex, max, min);
        return localVarResp.getData();
    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return ApiResponse&lt;List&lt;SensibleNftUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleNftUtxo>> sensibleNftGenesisCodeHashGenesisUtxoGetWithHttpInfo(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        okhttp3.Call localVarCall = sensibleNftGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, null);
        Type localVarReturnType = new TypeToken<List<SensibleNftUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftGenesisCodeHashGenesisUtxoGetAsync(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback<List<SensibleNftUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleNftGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleNftUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleNftSellAddressAddressUtxoGet
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftSellAddressAddressUtxoGetCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/nft/sell/address/{address}/utxo"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeHash", codeHash));
        }

        if (genesis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genesis", genesis));
        }

        if (flag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag", flag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleNftSellAddressAddressUtxoGetValidateBeforeCall(String address, String codeHash, String genesis, String flag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling sensibleNftSellAddressAddressUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleNftSellAddressAddressUtxoGetCall(address, codeHash, genesis, flag, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible sell sell utxos for specific address.
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return List&lt;SensibleNftSellUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleNftSellUtxo> sensibleNftSellAddressAddressUtxoGet(String address, String codeHash, String genesis, String flag) throws ApiException {
        ApiResponse<List<SensibleNftSellUtxo>> localVarResp = sensibleNftSellAddressAddressUtxoGetWithHttpInfo(address, codeHash, genesis, flag);
        return localVarResp.getData();
    }

    /**
     * Get all sensible sell sell utxos for specific address.
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @return ApiResponse&lt;List&lt;SensibleNftSellUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleNftSellUtxo>> sensibleNftSellAddressAddressUtxoGetWithHttpInfo(String address, String codeHash, String genesis, String flag) throws ApiException {
        okhttp3.Call localVarCall = sensibleNftSellAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, null);
        Type localVarReturnType = new TypeToken<List<SensibleNftSellUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible sell sell utxos for specific address. (asynchronously)
     * 
     * @param address Owner address. (required)
     * @param codeHash Filter by contract code hash (optional)
     * @param genesis Filter by contract genesis (optional)
     * @param flag The flag of the last query Item(Paging flag) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftSellAddressAddressUtxoGetAsync(String address, String codeHash, String genesis, String flag, final ApiCallback<List<SensibleNftSellUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleNftSellAddressAddressUtxoGetValidateBeforeCall(address, codeHash, genesis, flag, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleNftSellUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sensibleNftSellGenesisCodeHashGenesisUtxoGet
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftSellGenesisCodeHashGenesisUtxoGetCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensible/nft/sell/genesis/{codeHash}/{genesis}/utxo"
            .replaceAll("\\{" + "codeHash" + "\\}", localVarApiClient.escapeString(codeHash.toString()))
            .replaceAll("\\{" + "genesis" + "\\}", localVarApiClient.escapeString(genesis.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tokenIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenIndex", tokenIndex));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sensibleNftSellGenesisCodeHashGenesisUtxoGetValidateBeforeCall(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeHash' is set
        if (codeHash == null) {
            throw new ApiException("Missing the required parameter 'codeHash' when calling sensibleNftSellGenesisCodeHashGenesisUtxoGet(Async)");
        }
        
        // verify the required parameter 'genesis' is set
        if (genesis == null) {
            throw new ApiException("Missing the required parameter 'genesis' when calling sensibleNftSellGenesisCodeHashGenesisUtxoGet(Async)");
        }
        

        okhttp3.Call localVarCall = sensibleNftSellGenesisCodeHashGenesisUtxoGetCall(codeHash, genesis, tokenIndex, max, min, _callback);
        return localVarCall;

    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return List&lt;SensibleNftSellUtxo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SensibleNftSellUtxo> sensibleNftSellGenesisCodeHashGenesisUtxoGet(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        ApiResponse<List<SensibleNftSellUtxo>> localVarResp = sensibleNftSellGenesisCodeHashGenesisUtxoGetWithHttpInfo(codeHash, genesis, tokenIndex, max, min);
        return localVarResp.getData();
    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId.
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @return ApiResponse&lt;List&lt;SensibleNftSellUtxo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SensibleNftSellUtxo>> sensibleNftSellGenesisCodeHashGenesisUtxoGetWithHttpInfo(String codeHash, String genesis, Long tokenIndex, Long max, Long min) throws ApiException {
        okhttp3.Call localVarCall = sensibleNftSellGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, null);
        Type localVarReturnType = new TypeToken<List<SensibleNftSellUtxo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sensible nft token utxos by codeHash and genesisId. (asynchronously)
     * 
     * @param codeHash Code hash of the token. (required)
     * @param genesis Contract genesis (required)
     * @param tokenIndex Find exact token Index. (optional)
     * @param max Token index not bigger than this(include this). (optional)
     * @param min Token index not less than this(include this). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get sensible nft sell utxo success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sensibleNftSellGenesisCodeHashGenesisUtxoGetAsync(String codeHash, String genesis, Long tokenIndex, Long max, Long min, final ApiCallback<List<SensibleNftSellUtxo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sensibleNftSellGenesisCodeHashGenesisUtxoGetValidateBeforeCall(codeHash, genesis, tokenIndex, max, min, _callback);
        Type localVarReturnType = new TypeToken<List<SensibleNftSellUtxo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
