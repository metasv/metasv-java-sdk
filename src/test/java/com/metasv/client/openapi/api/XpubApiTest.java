/*
 * MetaSV API Spec
 * API definition for MetaSV provided apis
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.metasv.client.openapi.api;

import com.metasv.client.openapi.ApiException;
import com.metasv.client.openapi.model.XPubTransaction;
import com.metasv.client.openapi.model.XpubAddress;
import com.metasv.client.openapi.model.XpubBalance;
import com.metasv.client.openapi.model.XpubDetail;
import com.metasv.client.openapi.model.XpubRequest;
import com.metasv.client.openapi.model.XpubResult;
import com.metasv.client.openapi.model.XpubUtxo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for XpubApi
 */
@Ignore
public class XpubApiTest {

    private final XpubApi api = new XpubApi();

    
    /**
     * Register a new xpub.
     *
     * You have to register xpub before you can query them.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubPostTest() throws ApiException {
        XpubRequest xpubRequest = null;
        XpubResult response = api.xpubPost(xpubRequest);

        // TODO: test validations
    }
    
    /**
     * Get xpub address type and index. Only index under max index is valid. Otherwise not found.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubAddressAddressGetTest() throws ApiException {
        String xpub = null;
        String address = null;
        XpubAddress response = api.xpubXpubAddressAddressGet(xpub, address);

        // TODO: test validations
    }
    
    /**
     * Get xpub balances including confirmed and unconfirmed.
     *
     * This api returns confirmed balance(same as address balance), not sumed utxos.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubBalanceGetTest() throws ApiException {
        String xpub = null;
        XpubBalance response = api.xpubXpubBalanceGet(xpub);

        // TODO: test validations
    }
    
    /**
     * Delete a registered xpub.
     *
     * You can use this api to delete your registered xpub.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubDeleteTest() throws ApiException {
        String xpub = null;
        XpubResult response = api.xpubXpubDelete(xpub);

        // TODO: test validations
    }
    
    /**
     * Get xpub detail and status. Only registered xpub available.
     *
     * This api returns the xpub detail you registered, authentication is required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubGetTest() throws ApiException {
        String xpub = null;
        XpubDetail response = api.xpubXpubGet(xpub);

        // TODO: test validations
    }
    
    /**
     * Get xpub transaction history by specific xpub(100 per page).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubTxsGetTest() throws ApiException {
        String xpub = null;
        String flag = null;
        List<XPubTransaction> response = api.xpubXpubTxsGet(xpub, flag);

        // TODO: test validations
    }
    
    /**
     * Get valid utxo count(including confirmed and unconfirmed).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubUtxoCountGetTest() throws ApiException {
        String xpub = null;
        Integer response = api.xpubXpubUtxoCountGet(xpub);

        // TODO: test validations
    }
    
    /**
     * Get xpub utxos by specific xpub(300 per page).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubXpubUtxoGetTest() throws ApiException {
        String xpub = null;
        Long limit = null;
        List<XpubUtxo> response = api.xpubXpubUtxoGet(xpub, limit);

        // TODO: test validations
    }
    
    /**
     * Get the total count of registered xpubs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubsCountGetTest() throws ApiException {
        Integer response = api.xpubsCountGet();

        // TODO: test validations
    }
    
    /**
     * Get all registered xpub strings. 300 per page.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void xpubsGetTest() throws ApiException {
        String flag = null;
        List<String> response = api.xpubsGet(flag);

        // TODO: test validations
    }
    
}
